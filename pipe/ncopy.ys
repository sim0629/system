#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len ints to dst.
# Return the number of positive ints (>0) contained in src.
#
# 2009-11744 심규민
#
# 다음과 같은 순서대로 CPE를 줄여 나갔다.
#
# 0. (처음 상태)
#   Average CPE: 16.44
#
# 1. 붙어 있는 irmovl, addl/subl을 iaddl로 대체하였다.
#   Average CPE: 13.96
#
# 2. (pipe-full.hcl에 load forwarding 구현)
#   Average CPE: 12.96
#
# 3. len > 0 조건을 체크하기 위해 andl을 하여 flag를 세팅하게 되어
#   있었는데, len--를 하고 나서 발생하는 flag를 그대로 이용하여
#   andl을 하나 줄였다.
#   Average CPE: 11.96
#
# 4. len을 홀짝으로 구분하여 2-step씩 진행하도록 loop를
#   unrolling을 하였다.
#   Average CPE: 10.37
#
# 5. loop unrolling을 2-step에서 4-step로 늘렸다.
#   len이 4로 나누어 떨어지지 않을 때에는 loop를 하기 전에
#   나머지에 해당하는 만큼 처리(consume)했다.
#   Average CPE: 9.99
#
# 6. loop header에서 불필요한 len == 0 체크를 제거하였다.
#   loop unrolling을 하면서 필요없어졌다.
#   Average CPE: 9.75
#
# 7. Consume loop에서 나머지(edi)와 전체 길이(edx)를 둘 다 빼지
#   않고 edx는 다 돌고 bit masking으로 계산했다.
#   Average CPE: 9.71
#
# 8. mask를 2-bit(4-step)에서 3-bit(8-step)으로 늘려서, loop un-
#   rolling을 더 하였다.
#   Average CPE: 9.63
#
##################################################################
# Do not modify this portion
# Function prologue.
ncopy:	pushl %ebp		# Save old frame pointer
	rrmovl %esp,%ebp	# Set up new frame pointer
	pushl %esi		# Save callee-save regs
	pushl %ebx
	pushl %edi
	mrmovl 8(%ebp),%ebx	# src
	mrmovl 16(%ebp),%edx	# len
	mrmovl 12(%ebp),%ecx	# dst

##################################################################
# You can modify this portion
	# Loop header
	xorl %eax, %eax		# count = 0;
	irmovl $0x7, %edi	# 3-bit mask
	andl %edx, %edi		# set %edi to (len % 8)
	je Do			# if 0, goto Do:
Consume:
	mrmovl (%ebx), %esi	# otherwise, consume the rest
	rmmovl %esi, (%ecx)
	andl %esi, %esi
	jle Npos0
	iaddl $1, %eax
Npos0:
	iaddl $4, %ebx
	iaddl $4, %ecx
	iaddl $-1, %edi
	jg Consume
Do:
	irmovl $0xFFFFFFF8, %edi
	andl %edi, %edx
	jle Done
Loop:
	mrmovl (%ebx), %esi	# read val from src...
	rmmovl %esi, (%ecx)	# ...and store it to dst
	andl %esi, %esi		# val <= 0?
	jle Npos1		# if so, goto Npos1:
	iaddl $1, %eax		# count++
Npos1:
	mrmovl 4(%ebx), %esi	# read val from src...
	rmmovl %esi, 4(%ecx)	# ...and store it to dst
	andl %esi, %esi		# val <= 0?
	jle Npos2		# if so, goto Npos2:
	iaddl $1, %eax		# count++
Npos2:
	mrmovl 8(%ebx), %esi	# read val from src...
	rmmovl %esi, 8(%ecx)	# ...and store it to dst
	andl %esi, %esi		# val <= 0?
	jle Npos3		# if so, goto Npos3:
	iaddl $1, %eax		# count++
Npos3:
	mrmovl 12(%ebx), %esi	# read val from src...
	rmmovl %esi, 12(%ecx)	# ...and store it to dst
	andl %esi, %esi		# val <= 0?
	jle Npos4		# if so, goto Npos4:
	iaddl $1, %eax		# count++
Npos4:
	mrmovl 16(%ebx), %esi	# read val from src...
	rmmovl %esi, 16(%ecx)	# ...and store it to dst
	andl %esi, %esi		# val <= 0?
	jle Npos5		# if so, goto Npos5:
	iaddl $1, %eax		# count++
Npos5:
	mrmovl 20(%ebx), %esi	# read val from src...
	rmmovl %esi, 20(%ecx)	# ...and store it to dst
	andl %esi, %esi		# val <= 0?
	jle Npos6		# if so, goto Npos6:
	iaddl $1, %eax		# count++
Npos6:
	mrmovl 24(%ebx), %esi	# read val from src...
	rmmovl %esi, 24(%ecx)	# ...and store it to dst
	andl %esi, %esi		# val <= 0?
	jle Npos7		# if so, goto Npos7:
	iaddl $1, %eax		# count++
Npos7:
	mrmovl 28(%ebx), %esi	# read val from src...
	rmmovl %esi, 28(%ecx)	# ...and store it to dst
	andl %esi, %esi		# val <= 0?
	jle Npos8		# if so, goto Npos8:
	iaddl $1, %eax		# count++
Npos8:
	iaddl $32, %ebx		# src++ (8 times)
	iaddl $32, %ecx		# dst++ (8 times)
	iaddl $-8, %edx		# len-- (8 times); len > 0?
	jg Loop			# if so, goto Loop:
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	popl %edi               # Restore callee-save registers
	popl %ebx
	popl %esi
	rrmovl %ebp, %esp
	popl %ebp
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
